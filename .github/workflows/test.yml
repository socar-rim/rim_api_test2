name: Rim Tests  # 워크플로우 이름

on:     # 워크플로우가 언제 실행될지 설정하는 부분으로, 필수항목
  # schedule:
   # - cron: '0 8 * * *'  # 매일 오후 5시 (KST 기준, UTC 8시)

  push: # 특정 브랜치로 push될때마다 실행하도록 설정 
    branches:
      - main
      
  workflow_dispatch:  # UI에서 수동 실행 가능

jobs:
  run_newman:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository # 필수 설정 값으로, 보통 제일 먼저 쓰며 GitHub 리포지토리에서 소스 코드 또는 파일을 가져오는 역할
        uses: actions/checkout@v3

      # 2. Install Node.js to use npm
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'  # 특정 Node.js 버전을 사용하도록 설정
          
      # 3. Install Newman and Slack Reporter
      - name: Install Newman and Slack Reporter
        run: |
          npm install -g newman newman-reporter-slackmsg
          
     # 4. Run Postman Collection
      - name: Run Postman Collection
        run: |
          newman run ./Login.json \
            # --suppress-exit-code \  # 테스트가 실패해도 수행되도록 하는 설정값 
            -r cli,slackmsg \
            --suppress-exit-code \
            --reporter-slackmsg-token ${{ secrets.SLACK_BOT_TOKEN }} \
            --reporter-slackmsg-webhookurl ${{ secrets.SLACK_WEBHOOK_URL }} \
            --reporter-slackmsg-channel '#rim_api_noti' \
            || true 
            
          if grep '"error"' ./Login.json; then
            newman run ./Login.json \
              -r slackmsg \
              --reporter-slackmsg-token ${{ secrets.SLACK_BOT_TOKEN }} \
              --reporter-slackmsg-webhookurl ${{ secrets.SLACK_WEBHOOK_URL }} \
              --reporter-slackmsg-channel '#rim_api_noti' \
              --data '{"text": "❌ Newman 테스트 실패: 자세한 내용은 로그를 확인하세요."}
          else
            curl -X POST -H 'Content-type: application/json' \
            --data '{"text": "✅ Newman 테스트 성공!"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}
          fi
            
